import sgMail from '@sendgrid/mail';

if (!process.env.SENDGRID_API_KEY) {
  throw new Error("SENDGRID_API_KEY environment variable must be set");
}

sgMail.setApiKey(process.env.SENDGRID_API_KEY);

interface EmailOptions {
  to: string;
  from?: string;
  subject: string;
  text?: string;
  html?: string;
  templateId?: string;
  dynamicTemplateData?: any;
}

export class SendGridService {
  static async sendEmail(options: EmailOptions): Promise<{
    success: boolean;
    messageId?: string;
    error?: string;
  }> {
    try {
      const msg: any = {
        to: options.to,
        from: options.from || 'noreply@omnidimension.app',
        subject: options.subject,
      };

      if (options.templateId) {
        msg.templateId = options.templateId;
        if (options.dynamicTemplateData) {
          msg.dynamicTemplateData = options.dynamicTemplateData;
        }
      } else {
        if (options.text) msg.text = options.text;
        if (options.html) msg.html = options.html;
      }

      const [response] = await sgMail.send(msg);

      return {
        success: true,
        messageId: response.headers['x-message-id']
      };
    } catch (error) {
      console.error('SendGrid email failed:', error);
      return {
        success: false,
        error: (error as Error).message
      };
    }
  }

  static async sendBulkEmails(emails: EmailOptions[]): Promise<{
    success: boolean;
    sent: number;
    failed: number;
    errors?: string[];
  }> {
    const results = await Promise.allSettled(
      emails.map(email => this.sendEmail(email))
    );

    const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
    const failed = results.length - successful;
    const errors = results
      .filter(r => r.status === 'rejected' || (r.status === 'fulfilled' && !r.value.success))
      .map(r => r.status === 'rejected' ? r.reason.message : (r as any).value.error);

    return {
      success: failed === 0,
      sent: successful,
      failed,
      errors: errors.length > 0 ? errors : undefined
    };
  }

  static async sendFollowUpEmail(params: {
    to: string;
    recipientName: string;
    subject: string;
    meetingDetails?: any;
    callSummary?: string;
    nextSteps?: string[];
  }): Promise<{
    success: boolean;
    messageId?: string;
    error?: string;
  }> {
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">Follow-up: ${params.subject}</h2>
        
        <p>Hi ${params.recipientName},</p>
        
        <p>Thank you for taking the time to connect with us. This email serves as a follow-up to our recent conversation.</p>
        
        ${params.callSummary ? `
          <div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #374151;">Call Summary</h3>
            <p>${params.callSummary}</p>
          </div>
        ` : ''}
        
        ${params.meetingDetails ? `
          <div style="background: #eff6ff; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #1e40af;">Meeting Details</h3>
            <p><strong>Date:</strong> ${params.meetingDetails.date || 'TBD'}</p>
            <p><strong>Time:</strong> ${params.meetingDetails.time || 'TBD'}</p>
            <p><strong>Location:</strong> ${params.meetingDetails.location || 'TBD'}</p>
          </div>
        ` : ''}
        
        ${params.nextSteps && params.nextSteps.length > 0 ? `
          <div style="margin: 20px 0;">
            <h3 style="color: #374151;">Next Steps</h3>
            <ul>
              ${params.nextSteps.map(step => `<li>${step}</li>`).join('')}
            </ul>
          </div>
        ` : ''}
        
        <p>If you have any questions or need to make changes, please don't hesitate to reach out.</p>
        
        <p>Best regards,<br>
        The OmniDimension Team</p>
        
        <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;">
        <p style="font-size: 12px; color: #6b7280;">
          This email was automatically generated by the OmniDimension agent platform.
        </p>
      </div>
    `;

    return this.sendEmail({
      to: params.to,
      subject: `Follow-up: ${params.subject}`,
      html
    });
  }
}